openapi: 3.0.3
info:
  title: API-Driven Commerce Demo
  version: "1.0.0"
  description: |
    OpenAPI specification for the demo ecommerce API. Every interaction in the
    accompanying web storefront uses these endpoints.
servers:
  - url: https://{host}
    description: Deployment base URL
    variables:
      host:
        default: localhost:8000
paths:
  /api/auth/register:
    post:
      summary: Register user
      tags: [Authentication]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreate'
      responses:
        "201":
          description: User registered
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserRead'
        "400":
          $ref: '#/components/responses/BadRequest'
  /api/auth/login:
    post:
      summary: Obtain access token
      tags: [Authentication]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLogin'
      responses:
        "200":
          description: Bearer token issued
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
        "401":
          $ref: '#/components/responses/Unauthorized'
  /api/users/me:
    get:
      summary: Current user profile
      tags: [Users]
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Authenticated user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserRead'
        "401":
          $ref: '#/components/responses/Unauthorized'
  /api/products:
    get:
      summary: List products
      tags: [Products]
      responses:
        "200":
          description: Array of active products
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProductRead'
    post:
      summary: Create product
      tags: [Products]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductCreate'
      responses:
        "201":
          description: Product created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductRead'
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
  /api/products/{productId}:
    parameters:
      - $ref: '#/components/parameters/ProductId'
    put:
      summary: Update product
      tags: [Products]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductUpdate'
      responses:
        "200":
          description: Product updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductRead'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
    delete:
      summary: Delete product
      tags: [Products]
      security:
        - bearerAuth: []
      responses:
        "204":
          description: Product deleted
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
  /api/cart:
    get:
      summary: Get shopping cart
      tags: [Cart]
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Cart summary
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CartSummary'
        "401":
          $ref: '#/components/responses/Unauthorized'
  /api/cart/items:
    post:
      summary: Add item to cart
      tags: [Cart]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CartItemCreate'
      responses:
        "201":
          description: Cart item created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CartItemRead'
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
  /api/cart/items/{itemId}:
    parameters:
      - $ref: '#/components/parameters/CartItemId'
    put:
      summary: Update cart item quantity
      tags: [Cart]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CartItemUpdate'
      responses:
        "200":
          description: Updated cart item
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CartItemRead'
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "404":
          $ref: '#/components/responses/NotFound'
    delete:
      summary: Remove cart item
      tags: [Cart]
      security:
        - bearerAuth: []
      responses:
        "204":
          description: Cart item deleted
        "401":
          $ref: '#/components/responses/Unauthorized'
        "404":
          $ref: '#/components/responses/NotFound'
  /api/orders:
    get:
      summary: List orders
      tags: [Orders]
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Orders for current user
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OrderRead'
        "401":
          $ref: '#/components/responses/Unauthorized'
    post:
      summary: Checkout cart
      tags: [Orders]
      security:
        - bearerAuth: []
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderCreate'
      responses:
        "201":
          description: Order created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderRead'
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
  /api/admin/reset:
    post:
      summary: Reset and reseed database
      tags: [Administration]
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Database recreated and demo data reseeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResetResponse'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  parameters:
    ProductId:
      name: productId
      in: path
      required: true
      schema:
        type: integer
      description: Numeric identifier of the product
    CartItemId:
      name: itemId
      in: path
      required: true
      schema:
        type: integer
      description: Numeric identifier of the cart item
  responses:
    Unauthorized:
      description: Missing or invalid credentials
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    Forbidden:
      description: Operation requires elevated privileges
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    BadRequest:
      description: Invalid payload or failed precondition
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
  schemas:
    ErrorResponse:
      type: object
      properties:
        detail:
          oneOf:
            - type: string
            - type: array
              items:
                type: string
    ResetResponse:
      type: object
      properties:
        detail:
          type: string
          example: Database reset and reseeded
      required: [detail]
    Token:
      type: object
      properties:
        access_token:
          type: string
        token_type:
          type: string
          example: bearer
        expires_in:
          type: integer
          description: Token lifetime in seconds
      required: [access_token, token_type, expires_in]
    UserBase:
      type: object
      properties:
        email:
          type: string
          format: email
        full_name:
          type: string
          nullable: true
    UserCreate:
      allOf:
        - $ref: '#/components/schemas/UserBase'
        - type: object
          properties:
            password:
              type: string
              format: password
              minLength: 6
            is_admin:
              type: boolean
              default: false
          required: [password]
      required: [email]
    UserLogin:
      type: object
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          format: password
      required: [email, password]
    UserRead:
      allOf:
        - $ref: '#/components/schemas/UserBase'
        - type: object
          properties:
            id:
              type: integer
            is_admin:
              type: boolean
            created_at:
              type: string
              format: date-time
          required: [id, email, is_admin, created_at]
    ProductBase:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        price:
          type: number
          format: float
          minimum: 0
        inventory_count:
          type: integer
          minimum: 0
        image_url:
          type: string
          format: uri
          nullable: true
        is_active:
          type: boolean
          default: true
      required: [name, description, price, inventory_count]
    ProductCreate:
      allOf:
        - $ref: '#/components/schemas/ProductBase'
    ProductUpdate:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        price:
          type: number
          format: float
          minimum: 0
        inventory_count:
          type: integer
          minimum: 0
        image_url:
          type: string
          format: uri
          nullable: true
        is_active:
          type: boolean
    ProductRead:
      allOf:
        - $ref: '#/components/schemas/ProductBase'
        - type: object
          properties:
            id:
              type: integer
            created_at:
              type: string
              format: date-time
          required: [id, created_at]
    CartItemCreate:
      type: object
      properties:
        product_id:
          type: integer
        quantity:
          type: integer
          minimum: 1
          default: 1
      required: [product_id]
    CartItemUpdate:
      type: object
      properties:
        quantity:
          type: integer
          minimum: 1
      required: [quantity]
    CartItemRead:
      type: object
      properties:
        id:
          type: integer
        product:
          $ref: '#/components/schemas/ProductRead'
        quantity:
          type: integer
        added_at:
          type: string
          format: date-time
      required: [id, product, quantity, added_at]
    CartSummary:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/CartItemRead'
        subtotal:
          type: number
          format: float
      required: [items, subtotal]
    OrderCreate:
      type: object
      properties:
        shipping_address:
          type: string
          nullable: true
    OrderItemRead:
      type: object
      properties:
        id:
          type: integer
        product:
          $ref: '#/components/schemas/ProductRead'
        quantity:
          type: integer
        unit_price:
          type: number
          format: float
      required: [id, product, quantity, unit_price]
    OrderRead:
      type: object
      properties:
        id:
          type: integer
        status:
          type: string
        total_amount:
          type: number
          format: float
        created_at:
          type: string
          format: date-time
        items:
          type: array
          items:
            $ref: '#/components/schemas/OrderItemRead'
      required: [id, status, total_amount, created_at, items]
